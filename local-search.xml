<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>TCP三次握手和四次挥手详解</title>
    <link href="/2020/05/22/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%AF%A6%E8%A7%A3/"/>
    <url>/2020/05/22/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文转载自<a href="https://yuanrengu.com/2020/77eef79f.html" target="_blank" rel="noopener">https://yuanrengu.com/2020/77eef79f.html</a></p><p>文章作者:猿人谷</p><p>写的很详细，大家都可以认真看一下</p></blockquote><p>三次握手和四次挥手是各个公司常见的考点，也具有一定的水平区分度，也被一些面试官作为热身题。很多小伙伴说这个问题刚开始回答的挺好，但是后面越回答越冒冷汗，最后就歇菜了。</p><p>见过比较典型的面试场景是这样的:</p><blockquote><p>面试官：请介绍下三次握手<br>求职者：第一次握手就是客户端给服务器端发送一个报文，第二次就是服务器收到报文之后，会应答一个报文给客户端，第三次握手就是客户端收到报文后再给服务器发送一个报文，三次握手就成功了。<br>面试官：然后呢？<br>求职者：这就是三次握手的过程，很简单的。<br>面试官：。。。。。。<br>（<strong>番外篇：一首凉凉送给你</strong>）</p></blockquote><p>记住猿人谷一句话：<strong>面试时越简单的问题，一般就是隐藏着比较大的坑，一般都是需要将问题扩展的</strong>。上面求职者的回答不对吗？当然对，但距离面试官的期望可能还有点距离。</p><p>希望大家能带着如下问题进行阅读，收获会更大。</p><ol><li>请画出三次握手和四次挥手的示意图</li><li>为什么连接的时候是三次握手？</li><li>什么是半连接队列？</li><li>ISN(Initial Sequence Number)是固定的吗？</li><li>三次握手过程中可以携带数据吗？</li><li>如果第三次握手丢失了，客户端服务端会如何处理？</li><li>SYN攻击是什么？</li><li>挥手为什么需要四次？</li><li>四次挥手释放连接时，等待2MSL的意义?</li></ol><p><img src="http://cdn.yuanrengu.com/img/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.jpg" srcset="/img/loading.gif" alt="三次握手和四次挥手"></p><h2 id="1-三次握手"><a href="#1-三次握手" class="headerlink" title="1. 三次握手"></a>1. 三次握手</h2><p>三次握手（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换<code>TCP窗口大小</code>信息。</p><p>刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。<br>进行三次握手：</p><ul><li><p>第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN。此时客户端处于 <code>SYN_SENT</code> 状态。</p><p>首部的同步位SYN=1，初始序号seq=x，SYN=1的报文段不能携带数据，但要消耗掉一个序号。</p></li><li><p>第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN(s)。同时会把客户端的 ISN + 1 作为ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 <code>SYN_RCVD</code> 的状态。</p><p>在确认报文段中SYN=1，ACK=1，确认号ack=x+1，初始序号seq=y。</p></li><li><p>第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 <code>ESTABLISHED</code> 状态。服务器收到 ACK 报文之后，也处于 <code>ESTABLISHED</code> 状态，此时，双方已建立起了连接。</p><p>确认报文段ACK=1，确认号ack=y+1，序号seq=x+1（初始为seq=x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号。</p></li></ul><p>发送第一个SYN的一端将执行主动打开（active open），接收这个SYN并发回下一个SYN的另一端执行被动打开（passive open）。</p><p>在socket编程中，客户端执行connect()时，将触发三次握手。</p><p><img src="http://cdn.yuanrengu.com/img/20200210134500.png" srcset="/img/loading.gif" alt="img"></p><p>用更通俗的语言来解释三次握手过程：</p><ul><li>服务端调用listen系统命令，进入监听状态，等待客户端的连接。</li><li>客户端向服务端发送<code>连接请求报文</code>，其中TCP标志位里SYN=1，ACK=0，选择一个初始的序号x。</li><li>服务端收到请求报文，向 客户端 发送<code>连接确认报文</code>，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 y。</li><li>客户端 收到 服务端的连接确认报文后，还要向 服务端 <code>发出确认</code>，确认号为 y+1，序号为 x+1。</li><li>服务端 收到 客户端 的确认后，<code>连接建立</code>。</li></ul><h3 id="1-1-为什么需要三次握手，两次不行吗？"><a href="#1-1-为什么需要三次握手，两次不行吗？" class="headerlink" title="1.1 为什么需要三次握手，两次不行吗？"></a>1.1 为什么需要三次握手，两次不行吗？</h3><p>第三次握手是为了防止<code>失效的连接请求到达服务器，让服务器错误打开连接</code>。</p><p>弄清这个问题，我们需要先弄明白三次握手的目的是什么，能不能只用两次握手来达到同样的目的。</p><ul><li>第一次握手：客户端发送网络包，服务端收到了。<br>这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的。</li><li>第二次握手：服务端发包，客户端收到了。<br>这样客户端就能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。不过此时服务器并不能确认客户端的接收能力是否正常。</li><li>第三次握手：客户端发包，服务端收到了。<br>这样服务端就能得出结论：客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常。</li></ul><p>因此，需要三次握手才能确认双方的接收与发送能力是否正常。</p><p>试想如果是用两次握手，则会出现下面这种情况：</p><blockquote><p>如客户端发出连接请求，但因连接请求报文丢失而未收到确认，于是客户端再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接，客户端共发出了两个连接请求报文段，其中第一个丢失，第二个到达了服务端，但是第一个丢失的报文段只是在<strong>某些网络结点长时间滞留了，延误到连接释放以后的某个时间才到达服务端</strong>，此时服务端误认为客户端又发出一次新的连接请求，于是就向客户端发出确认报文段，同意建立连接，不采用三次握手，只要服务端发出确认，就建立新的连接了，此时客户端忽略服务端发来的确认，也不发送数据，则服务端一致等待客户端发送数据，浪费资源。</p></blockquote><h3 id="1-2-什么是半连接队列？"><a href="#1-2-什么是半连接队列？" class="headerlink" title="1.2 什么是半连接队列？"></a>1.2 什么是半连接队列？</h3><p>服务器第一次收到客户端的 SYN 之后，就会处于 SYN_RCVD 状态，此时双方还没有完全建立其连接，服务器会把此种状态下请求连接放在一个<strong>队列</strong>里，我们把这种队列称之为<strong>半连接队列</strong>。</p><p>当然还有一个<strong>全连接队列</strong>，就是已经完成三次握手，建立起连接的就会放在全连接队列中。如果队列满了就有可能会出现丢包现象。</p><p>这里再补充一点关于<strong>SYN-ACK 重传次数</strong>的问题：<br>服务器发送完SYN-ACK包，如果未收到客户确认包，服务器进行首次重传，等待一段时间仍未收到客户确认包，进行第二次重传。如果重传次数超过系统规定的最大重传次数，系统将该连接信息从半连接队列中删除。<br>注意，每次重传等待的时间不一定相同，一般会是指数增长，例如间隔时间为 1s，2s，4s，8s……</p><blockquote><p>关于建连接时<code>SYN超时</code>。试想一下，如果server端接到了clien发的SYN后回了SYN-ACK后client掉线了，server端没有收到client回来的ACK，那么，这个连接处于一个中间状态，即没成功，也没失败。于是，server端如果在一定时间内没有收到的TCP会重发SYN-ACK。在Linux下，默认重试次数为<code>5次</code>，重试的间隔时间从1s开始每次都翻售，5次的重试时间间隔为1s, 2s, 4s, 8s, 16s，总共31s，第5次发出后还要等32s都知道第5次也超时了，所以，总共需要 1s + 2s + 4s+ 8s+ 16s + 32s = 2^6 -1 = <code>63s</code>，TCP才会把断开这个连接。</p></blockquote><h3 id="1-3-ISN-Initial-Sequence-Number-是固定的吗？"><a href="#1-3-ISN-Initial-Sequence-Number-是固定的吗？" class="headerlink" title="1.3 ISN(Initial Sequence Number)是固定的吗？"></a>1.3 ISN(Initial Sequence Number)是固定的吗？</h3><p>当一端为建立连接而发送它的SYN时，它为连接选择一个初始序号。ISN随时间而变化，因此每个连接都将具有不同的ISN。ISN可以看作是一个32比特的计数器，每4ms加1 。这样选择序号的目的在于防止在网络中被延迟的分组在以后又被传送，而导致某个连接的一方对它做错误的解释。</p><p><strong>三次握手的其中一个重要功能是客户端和服务端交换 ISN(Initial Sequence Number)，以便让对方知道接下来接收数据的时候如何按序列号组装数据。如果 ISN 是固定的，攻击者很容易猜出后续的确认号，因此 ISN 是动态生成的</strong>。</p><blockquote><p>对于连接的3次握手，主要是要初始化Sequence Number 的初始值。通信的双方要互相通知对方自己的初始化的Sequence Number（缩写为ISN：Inital Sequence Number）。<code>这个号要作为以后的数据通信的序号，以保证应用层接收到的数据不会因为网络上的传输的问题而乱序</code>（TCP会用这个序号来拼接数据）。</p></blockquote><h3 id="1-4-三次握手过程中可以携带数据吗？"><a href="#1-4-三次握手过程中可以携带数据吗？" class="headerlink" title="1.4 三次握手过程中可以携带数据吗？"></a>1.4 三次握手过程中可以携带数据吗？</h3><p>其实第三次握手的时候，是可以携带数据的。但是，<strong>第一次、第二次握手不可以携带数据</strong>。</p><p>为什么这样呢?大家可以想一个问题，假如第一次握手可以携带数据的话，如果有人要恶意攻击服务器，那他每次都在第一次握手中的 SYN 报文中放入大量的数据。因为攻击者根本就不理服务器的接收、发送能力是否正常，然后疯狂着重复发 SYN 报文的话，这会让服务器花费很多时间、内存空间来接收这些报文。</p><p>也就是说，<strong>第一次握手不可以放数据，其中一个简单的原因就是会让服务器更加容易受到攻击了。而对于第三次的话，此时客户端已经处于 ESTABLISHED 状态。对于客户端来说，他已经建立起连接了，并且也已经知道服务器的接收、发送能力是正常的了，所以能携带数据也没啥毛病。</strong></p><h3 id="1-5-SYN攻击是什么？"><a href="#1-5-SYN攻击是什么？" class="headerlink" title="1.5 SYN攻击是什么？"></a>1.5 SYN攻击是什么？</h3><p><strong>服务器端的资源分配是在二次握手时分配的，而客户端的资源是在完成三次握手时分配的</strong>，所以服务器容易受到SYN洪泛攻击。SYN攻击就是Client在短时间内伪造大量不存在的IP地址，并向Server不断地发送SYN包，Server则回复确认包，并等待Client确认，由于源地址不存在，因此Server需要不断重发直至超时，这些伪造的SYN包将长时间占用未连接队列，导致正常的SYN请求因为队列满而被丢弃，从而引起网络拥塞甚至系统瘫痪。SYN 攻击是一种典型的 DoS/DDoS 攻击。</p><p>检测 SYN 攻击非常的方便，当你在服务器上看到大量的<code>半连接状态</code>时，特别是源IP地址是随机的，基本上可以断定这是一次SYN攻击。在 Linux/Unix 上可以使用系统自带的 netstat 命令来检测 SYN 攻击。</p><pre><code>netstat -n -p TCP | grep SYN_RECV</code></pre><p>复制</p><p>常见的防御 SYN 攻击的方法有如下几种：</p><ul><li>缩短超时（SYN Timeout）时间</li><li>增加最大半连接数</li><li>过滤网关防护</li><li>SYN cookies技术</li></ul><blockquote><p>关于SYN Flood攻击。一些恶意的人就为此制造了SYN Flood攻击——给服务器发了一个SYN后，就下线了，于是服务器需要默认等<code>63s</code>才会断开连接，这样，攻击者就可以把服务器的syn连接的队列耗尽，让正常的连接请求不能处理。于是，Linux下给了一个叫<code>tcp_syncookies</code>的参数来应对这个事——当SYN队列满了后，TCP会通过源地址端口、目标地址端口和时间戳打造出一个特别的Sequence Number发回去（又叫cookie），如果是攻击者则不会有响应，如果是正常连接，则会把这个 SYN Cookie发回来，然后服务端可以通过cookie建连接（即使你不在SYN队列中）。请注意，请先千万别用tcp_syncookies来处理正常的大负载的连接的情况。因为，synccookies是妥协版的TCP协议，并不严谨。对于正常的请求，你应该调整三个TCP参数可供你选择，第一个是：<code>tcp_synack_retries</code> 可以用他来减少重试次数；第二个是：<code>tcp_max_syn_backlog</code>，可以增大SYN连接数；第三个是：<code>tcp_abort_on_overflow</code> 处理不过来干脆就直接拒绝连接了。</p></blockquote><h3 id="1-6-第三次握手失败怎么办？"><a href="#1-6-第三次握手失败怎么办？" class="headerlink" title="1.6 第三次握手失败怎么办？"></a>1.6 第三次握手失败怎么办？</h3><p>当第三次握手失败时，服务器并不会重传ack报文，而是直接发送<code>RST报文段，进入CLOSED状态</code>。这样做的目的是为了<code>防止SYN洪泛攻击</code>。</p><h2 id="2-四次挥手"><a href="#2-四次挥手" class="headerlink" title="2. 四次挥手"></a>2. 四次挥手</h2><p>建立一个连接需要三次握手，而终止一个连接要经过四次挥手（也有将四次挥手叫做四次握手的）。这由TCP的<strong>半关闭</strong>（half-close）造成的。所谓的半关闭，其实就是TCP提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力。</p><p>TCP 连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，客户端或服务端均可主动发起挥手动作。</p><p>刚开始双方都处于<code>ESTABLISHED</code> 状态，假如是客户端先发起关闭请求。四次挥手的过程如下：</p><ul><li>第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 <code>FIN_WAIT1</code> 状态。<br>即发出<strong>连接释放报文段</strong>（FIN=1，序号seq=u），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认。</li><li>第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 <code>CLOSE_WAIT</code> 状态。<br>即服务端收到连接释放报文段后即发出<strong>确认报文段</strong>（ACK=1，确认号ack=u+1，序号seq=v），服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。</li><li>第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 <code>LAST_ACK</code> 的状态。<br>即服务端没有要向客户端发出的数据，服务端发出<strong>连接释放报文段</strong>（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），服务端进入LAST_ACK（最后确认）状态，等待客户端的确认。</li><li>第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 <code>TIME_WAIT</code> 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 <code>CLOSED</code> 状态。<br>即客户端收到服务端的连接释放报文段后，对此发出<strong>确认报文段</strong>（ACK=1，seq=u+1，ack=w+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态。</li></ul><p>收到一个FIN只意味着在这一方向上没有数据流动。<strong>客户端执行主动关闭并进入TIME_WAIT是正常的，服务端通常执行被动关闭，不会进入TIME_WAIT状态。</strong></p><p>在socket编程中，任何一方执行close()操作即可产生挥手操作。<br><img src="http://cdn.yuanrengu.com/img/20200210134547.png" srcset="/img/loading.gif" alt="img"></p><h3 id="2-1-挥手为什么需要四次？"><a href="#2-1-挥手为什么需要四次？" class="headerlink" title="2.1 挥手为什么需要四次？"></a>2.1 挥手为什么需要四次？</h3><p>因为当服务端收到客户端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中<strong>ACK报文是用来应答的，SYN报文是用来同步的</strong>。但是关闭连接时，当服务端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉客户端，”你发的FIN报文我收到了”。只有等到我服务端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四次挥手。</p><h3 id="2-2-2MSL等待状态"><a href="#2-2-2MSL等待状态" class="headerlink" title="2.2 2MSL等待状态"></a>2.2 2MSL等待状态</h3><p>TIME_WAIT状态也称为<code>2MSL等待状态</code>。每个具体TCP实现必须选择一个报文段最大生存时间MSL（Maximum Segment Lifetime），它是任何报文段被丢弃前在网络内的最长时间。这个时间是有限的，因为TCP报文段以IP数据报在网络内传输，而IP数据报则有限制其生存时间的TTL字段。</p><p>对一个具体实现所给定的MSL值，处理的原则是：当TCP执行一个主动关闭，并发回最后一个ACK，该连接必须在TIME_WAIT状态停留的时间为2倍的MSL。这样可让TCP再次发送最后的ACK以防这个ACK丢失（另一端超时并重发最后的FIN）。</p><p>这种2MSL等待的另一个结果是这个TCP连接在2MSL等待期间，定义这个连接的插口（客户的IP地址和端口号，服务器的IP地址和端口号）不能再被使用。这个连接只能在2MSL结束后才能再被使用。</p><h3 id="2-3-四次挥手释放连接时，等待2MSL的意义"><a href="#2-3-四次挥手释放连接时，等待2MSL的意义" class="headerlink" title="2.3 四次挥手释放连接时，等待2MSL的意义?"></a>2.3 四次挥手释放连接时，等待2MSL的意义?</h3><blockquote><p><strong>MSL</strong>是Maximum Segment Lifetime的英文缩写，可译为“最长报文段寿命”，它是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。</p></blockquote><p>为了保证客户端发送的最后一个ACK报文段能够到达服务器。因为这个ACK有可能丢失，从而导致处在LAST-ACK状态的服务器收不到对FIN-ACK的确认报文。服务器会超时重传这个FIN-ACK，接着客户端再重传一次确认，重新启动时间<code>等待计时器</code>。最后客户端和服务器都能正常的关闭。假设客户端不等待2MSL，而是在发送完ACK之后直接释放关闭，一但这个ACK丢失的话，服务器就无法正常的进入关闭连接状态。</p><h4 id="两个理由："><a href="#两个理由：" class="headerlink" title="两个理由："></a>两个理由：</h4><ol><li><p><strong>保证客户端发送的最后一个ACK报文段能够到达服务端</strong>。</p><p>这个ACK报文段有可能丢失，使得处于LAST-ACK状态的服务端收不到对已发送的FIN+ACK报文段的确认，服务端超时重传FIN+ACK报文段，而客户端能在2MSL时间内收到这个重传的FIN+ACK报文段，接着客户端重传一次确认，重新启动2MSL计时器，最后客户端和服务端都进入到CLOSED状态，若客户端在TIME-WAIT状态不等待一段时间，而是发送完ACK报文段后立即释放连接，则无法收到服务端重传的FIN+ACK报文段，所以不会再发送一次确认报文段，则服务端无法正常进入到CLOSED状态。</p></li><li><p><strong>防止“已失效的连接请求报文段”出现在本连接中</strong>。</p><p>客户端在发送完最后一个ACK报文段后，再经过2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失，使下一个新的连接中不会出现这种旧的连接请求报文段。</p></li></ol><blockquote><p>关于 MSL 和 TIME_WAIT。通过上面的ISN的描述，相信你也知道MSL是怎么来的了。我们注意到，在TCP的状态图中，从TIME_WAIT状态到CLOSED状态，有一个超时设置，这个超时设置是 2*MSL（<a href="https://tools.ietf.org/html/rfc793" target="_blank" rel="noopener">RFC793</a>定义了MSL为2分钟，Linux设置成了30s）为什么要这有TIME_WAIT？为什么不直接给转成CLOSED状态呢？主要有两个原因：1）TIME_WAIT确保有足够的时间让对端收到了ACK，如果被动关闭的那方没有收到Ack，就会触发<code>被动端重发Fin，一来一去正好2个MSL</code>，2）有足够的时间让这个连接不会跟后面的连接混在一起（你要知道，有些自做主张的路由器会缓存IP数据包，如果连接被重用了，那么这些延迟收到的包就有可能会跟新连接混在一起）。</p></blockquote><h3 id="2-4-为什么TIME-WAIT状态需要经过2MSL才能返回到CLOSE状态？"><a href="#2-4-为什么TIME-WAIT状态需要经过2MSL才能返回到CLOSE状态？" class="headerlink" title="2.4 为什么TIME_WAIT状态需要经过2MSL才能返回到CLOSE状态？"></a>2.4 为什么TIME_WAIT状态需要经过2MSL才能返回到CLOSE状态？</h3><p>理论上，四个报文都发送完毕，就可以直接进入CLOSE状态了，但是可能网络是不可靠的，有可能最后一个ACK丢失。所以<strong>TIME_WAIT状态就是用来重发可能丢失的ACK报文</strong>。</p><p>TIME-WAIT状态如果过多，会占用系统资源。Linux下有几个参数可以调整TIME-WAIT状态时间：</p><ul><li>net.ipv4.tcp_tw_reuse = 1 表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭。</li><li>net.ipv4.tcp_tw_recycle = 1 表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭。</li><li>net.ipv4.tcp_max_tw_buckets = 5000表示系统同时保持TIME_WAIT套接字的最大数量，如果超过这个数字，TIME_WAIT套接字将立刻被清除并打印警告信息。默认为180000，改为5000。</li></ul><p>解决TIME-WAIT状态过多的情况，一般做法是<code>打开系统的TIMEWAIT重用和快速回收</code>。然而，<code>主动进行关闭的链接才会进入TIME-WAIT状态</code>，所以最好的办法：尽量不要让服务器主动关闭链接，除非一些异常情况，如客户端协议错误、客户端超时等等。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>《TCP/IP详解 卷1:协议》有一张TCP状态变迁图，很具有代表性，有助于大家理解三次握手和四次挥手的状态变化。如下图所示，粗的实线箭头表示正常的客户端状态变迁，粗的虚线箭头表示正常的服务器状态变迁。</p><p><img src="http://cdn.yuanrengu.com/img/20200210134621.png" srcset="/img/loading.gif" alt="img"></p><p><strong>以后面试官再问你三次握手和四次挥手，直接把这一篇文章丢给他就可以了，他想问的都在这里。</strong></p><p><strong>参考</strong>：<br>《TCP/IP详解 卷1:协议》<br><a href="http://cdn.yuanrengu.com/img/040315115571.png" target="_blank" rel="noopener">状态转换伪代码</a><br><a href="https://coolshell.cn/articles/11564.html" target="_blank" rel="noopener">https://coolshell.cn/articles/11564.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>TCP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Harbor搭建Docker本地私服</title>
    <link href="/2020/04/27/%E5%9F%BA%E4%BA%8EHarbor%E6%90%AD%E5%BB%BADocker%E6%9C%AC%E5%9C%B0%E7%A7%81%E6%9C%8D/"/>
    <url>/2020/04/27/%E5%9F%BA%E4%BA%8EHarbor%E6%90%AD%E5%BB%BADocker%E6%9C%AC%E5%9C%B0%E7%A7%81%E6%9C%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="安装Harbor"><a href="#安装Harbor" class="headerlink" title="安装Harbor"></a>安装Harbor</h1><p>安装Harbor的前提条件是，本地已经装好了Docker-Compose。</p><p>我们可以从<a href="https://github.com/goharbor/harbor/releases" target="_blank" rel="noopener">https://github.com/goharbor/harbor/releases</a>找到Harbor的离线安装包。</p><p><img src="https://imgkr.cn-bj.ufileos.com/4e2075f3-5b83-491d-a585-2cf7f75e5b1c.png" srcset="/img/loading.gif" alt></p><p>在我们下载好<strong>harbor-offline-installer-v1.10.2.tgz</strong>，并进行解压。</p><pre><code class="shell">tar -zxvf harbor-offline-installer-v1.10.2.tgz</code></pre><p>随后进入解压好的目录，</p><p><img src="https://imgkr.cn-bj.ufileos.com/50f8c0a5-fde1-40a7-a4eb-4e0ba313d86c.png" srcset="/img/loading.gif" alt></p><pre><code class="shell"># 修改 harbor.yml hostname配置，同时也可以修改默认端口及默认登陆密码信息。vim harbor.yml# 在配置文件修改完成后，执行安装程序sh install.sh</code></pre><pre><code class="shell"># Configuration file of Harbor# The IP address or hostname to access admin UI and registry service.# DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.hostname: 192.168.1.130# http related confighttp:  # port for http, default is 80. If https enabled, this port will redirect to https port  port: 80# https related config# https:#   # https port for harbor, default is 443#   port: 443#   # The path of cert and key files for nginx#   certificate: /your/certificate/path#   private_key: /your/private/key/path# Uncomment external_url if you want to enable external proxy# And when it enabled the hostname will no longer used# external_url: https://reg.mydomain.com:8433# The initial password of Harbor admin# It only works in first time to install harbor# Remember Change the admin password from UI after launching Harbor.harbor_admin_password: Harbor12345</code></pre><p>待完全启动后，我们在浏览器打开192.168.1.130，不出意外就会出现Harbor的登陆页面，使用配置文件中的密码进行登陆即可。</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ul><li>停止服务： <code>docker-compose stop</code></li><li>开始服务： <code>docker-compose start</code></li></ul><h1 id="Docker配置私服"><a href="#Docker配置私服" class="headerlink" title="Docker配置私服"></a>Docker配置私服</h1><pre><code class="shell"># 修改 docker 接入私服vim /etc/docker/daemon.json&quot;insecure-registries&quot; : [&quot;192.168.1.130&quot;]# 重启docker systemctl restart docker</code></pre><h1 id="页面使用"><a href="#页面使用" class="headerlink" title="页面使用"></a>页面使用</h1><p>首先我们先看下登陆后的Harbor主页面</p><p><img src="https://imgkr.cn-bj.ufileos.com/a1bb0fd7-b165-4097-86f0-9b903e0d39dc.png" srcset="/img/loading.gif" alt></p><p>项目：就是我们需要使用到的私有化仓库地址。</p><p>我们可以点击项目名称，进入项目明细页面</p><p><img src="https://imgkr.cn-bj.ufileos.com/1b8fde60-79e3-42bf-bd66-3cb976b67f6e.png" srcset="/img/loading.gif" alt></p><p>里面有推送私有镜像的方法</p><p><img src="https://imgkr.cn-bj.ufileos.com/c6a068a8-146a-4c31-8c19-0622a5b8eb75.png" srcset="/img/loading.gif" alt></p><h1 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h1><pre><code class="shell">docker tag nginx:latest 192.168.1.130/library/nginx:0.0.1</code></pre><h1 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h1><h2 id="登陆私服"><a href="#登陆私服" class="headerlink" title="登陆私服"></a>登陆私服</h2><pre><code class="shell">docker login 192.168.1.130</code></pre><h2 id="上传镜像到私服"><a href="#上传镜像到私服" class="headerlink" title="上传镜像到私服"></a>上传镜像到私服</h2><pre><code class="shell">docker push 192.168.1.130/library/nginx:0.0.1</code></pre><p>打开网页，我们可以看到镜像仓库已经有我们刚才上传的镜像了</p><p><img src="https://imgkr.cn-bj.ufileos.com/b0869cc0-7c4c-42d8-a3fc-22ca096ef976.png" srcset="/img/loading.gif" alt></p>]]></content>
    
    
    
    <tags>
      
      <tag>Docker Harbor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>半小时Docker简单入门</title>
    <link href="/2019/12/30/%E5%8D%8A%E5%B0%8F%E6%97%B6Docker%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/"/>
    <url>/2019/12/30/%E5%8D%8A%E5%B0%8F%E6%97%B6Docker%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="安装最新Docker"><a href="#安装最新Docker" class="headerlink" title="安装最新Docker"></a>安装最新Docker</h1><p>这里安装主要基于Linux环境下的安装，Windows环境可以直接使用Docker Desktop。</p><ol><li><p>安装 Docker 官方源</p><pre><code class="shell">sudo yum-config-manager \     --add-repo \     https://download.docker.com/linux/centos/docker-ce.repo</code></pre><p>如果这里提示<code>yum-config-manager：未找到命令</code>，我们需要先安装yum工具。</p><pre><code class="shell">yum install -y yum-utils</code></pre></li><li><p>更新源</p><pre><code class="shell">yum makecache fast</code></pre></li><li><p>安装docker-ce</p><pre><code class="shell">yum install -y docker-ce</code></pre></li><li><p>设置开机执行</p><pre><code class="shell">systemctl enable docker</code></pre></li><li><p>启动docker</p><pre><code class="shell">systemctl start docker</code></pre></li><li><p>检查docker版本</p><pre><code class="shell">docker version</code></pre></li></ol><h1 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h1><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><pre><code class="shell">docker pull name:tag</code></pre><p>默认镜像的下载地址为<a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p><p>由于镜像地址在国外，但是由于显而易见的网络原因，拉取镜像的过程非常耗时，严重影响使用 Docker 的体验。</p><p>因此我们需要将Docker的镜像地址执行国内的第三方仓库，这样可以极大的提高国内网络访问Docker Hub的速度。</p><pre><code class="shell">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io#该脚本可以将 --registry-mirror 加入到你的 Docker 配置文件 /etc/docker/daemon.json 中#同时，您也可以自己编辑vim /etc/docker/deamon.json文件，注意一定要符合json格式要求。# {#    &quot;registry-mirrors&quot;: [&quot;http://f1361db2.m.daocloud.io&quot;]# }</code></pre><h2 id="查看本地已下载镜像"><a href="#查看本地已下载镜像" class="headerlink" title="查看本地已下载镜像"></a>查看本地已下载镜像</h2><pre><code class="shell">docker images</code></pre><p><img src="https://imgkr.cn-bj.ufileos.com/80d3ec81-4a7b-4ca6-99c3-aa304de58bc2.png" srcset="/img/loading.gif" alt="images"></p><ul><li><strong>REPOSITORY：</strong>表示镜像的仓库源</li><li><strong>TAG：</strong>镜像的标签</li><li><strong>IMAGE ID：</strong>镜像ID</li><li><strong>CREATED：</strong>镜像创建时间</li><li><strong>SIZE：</strong>镜像大小</li></ul><h2 id="删除本地已下载镜像"><a href="#删除本地已下载镜像" class="headerlink" title="删除本地已下载镜像"></a>删除本地已下载镜像</h2><pre><code class="shell">docker rmi image_id</code></pre><h1 id="端口操作"><a href="#端口操作" class="headerlink" title="端口操作"></a>端口操作</h1><pre><code class="shell">docker run --name name -d -p 8080:80 nginx:1.17</code></pre><ul><li>–name：为容器指定一个名称。</li><li>-d：后台运行容器，并返回容器ID。</li><li>-p：指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong>。同时支持多端口映射， <strong>-p 80-90:80-90</strong>。</li></ul><h1 id="挂载操作"><a href="#挂载操作" class="headerlink" title="挂载操作"></a>挂载操作</h1><pre><code class="shell">docker run --name name -d -p 8080:80 -v /data:/usr/share/nginx/html nginx:1.17</code></pre><ul><li>-v：绑定一个卷，前面是宿主机的目录，后面是容器目录。</li></ul><h1 id="日志操作"><a href="#日志操作" class="headerlink" title="日志操作"></a>日志操作</h1><pre><code class="shell">docker logs -f 容器名称或容器ID</code></pre><h1 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h1><pre><code class="shell">docker exec -it 容器名称 sh</code></pre><ul><li>-i：标准输入。</li><li>-t：分配一个伪终端。</li></ul><h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><pre><code class="shell">docker rm -f 容器名称</code></pre><ul><li>-f：通过 SIGKILL 信号强制删除一个运行中的容器。</li><li>如果不加 <strong>-f</strong> 则无法删除一个正在运行的容器，需要首先<code>docker stop 容器名称</code>。</li></ul><h1 id="网络操作"><a href="#网络操作" class="headerlink" title="网络操作"></a>网络操作</h1><pre><code class="shell">docker inspect 容器名称</code></pre><h1 id="通过Dockerfile文件构建镜像"><a href="#通过Dockerfile文件构建镜像" class="headerlink" title="通过Dockerfile文件构建镜像"></a>通过Dockerfile文件构建镜像</h1><pre><code class="shell">docker built . -t name:tag</code></pre><p>使用当前目录的Dockerfile创建镜像。</p><ul><li>-t：指定构建镜像的名字和标签。</li><li>-f：指定要使用的Dockerfile的完整路径。</li><li>-m：设置内存最大值。</li></ul><h1 id="Dockerfile示例"><a href="#Dockerfile示例" class="headerlink" title="Dockerfile示例"></a>Dockerfile示例</h1><pre><code class="shell">FROM centos #制作base image 基础镜像，尽量使用官方的image作为base imageLABEL version=&quot;1.0&quot; #容器元信息，帮助信息，Metadata，类似于代码注释LABEL maintainer=&quot;author&quot; #容器作者信息#对于复杂的RUN命令，避免无用的分层，多条命令用反斜线换行，合成一条命令！RUN yum update &amp;&amp; yum install -y vim \    Python-dev #反斜线换行WORKDIR /root #相当于linux的cd命令，改变目录，尽量使用绝对路径！！！不要用RUN cdWORKDIR /test # 如果没有就自动创建ADD test.tar.gz /  # 添加到根目录并解压COPY hello test/  # 等同于上述ADD效果ADD与COPY   - 优先使用COPY命令    -ADD除了COPY功能还有解压功能ENV # 环境变量，尽可能使用ENV增加可维护性ENV MYSQL_VERSION 5.6 # 设置一个mysql常量</code></pre><h1 id="安装Docker-Compose"><a href="#安装Docker-Compose" class="headerlink" title="安装Docker-Compose"></a>安装Docker-Compose</h1><pre><code class="shell">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-composesudo chmod +x /usr/local/bin/docker-composesudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-composedocker-compose --version#这里使用的是1.25.4版本，如果需要其他的版本，打开`https://github.com/docker/compose/releases`找到需要的版本号进行替换即可</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot格式化JSON日期</title>
    <link href="/2019/11/16/Boot%E6%A0%BC%E5%BC%8F%E5%8C%96JSON%E6%97%A5%E6%9C%9F/"/>
    <url>/2019/11/16/Boot%E6%A0%BC%E5%BC%8F%E5%8C%96JSON%E6%97%A5%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>本文基于Jackson而来，Jackson被Spring Boot 用作其默认JSON处理器，下面将展示如何在Spring Boot应用程序中格式化JSON日期字段。</p><a id="more"></a><h2 id="2-在日期字段上使用-JsonFormat"><a href="#2-在日期字段上使用-JsonFormat" class="headerlink" title="2.在日期字段上使用@JsonFormat"></a>2.在日期字段上使用<code>@JsonFormat</code></h2><h3 id="2-1-设定格式"><a href="#2-1-设定格式" class="headerlink" title="2.1 设定格式"></a>2.1 设定格式</h3><p><strong>我们可以使用  @JsonFormat注释来格式化特定字段：</strong></p><pre><code class="java">public class Contact {        // other fields    @JsonFormat(pattern=&quot;yyyy-MM-dd&quot;)        private LocalDate birthday;    @JsonFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)        private LocalDateTime updateTime;    // standard getters and setters}</code></pre><p>在birthday字段中，我们使用仅显示日期的模式，而在updateTime字段中还包含时间。</p><p>这里使用了Java8的日期类型，如果我们需要使用<code>java.util.Date</code>之类的遗留类型 ，则可以通过相同的方式使用注释。</p><p>最后，让我们看一下使用具有给定日期格式的<code>@JsonFormat</code> 呈现的输出：</p><pre><code class="json">{    &quot;birthday&quot;: &quot;2019-08-29&quot;,    &quot;updateTime&quot;: &quot;2019-08-29 16:58:12&quot;}</code></pre><p><strong>如我们所见，使用@JsonFormat 批注是格式化特定日期字段的绝佳方法。</strong></p><p><strong>但是，仅在需要字段的特定格式时才应使用它。</strong>如果我们希望对应用程序中的所有日期都采用通用格式，那么有更好的方法来实现这一点，我们将在后面介绍。</p><h3 id="2-2-设定时区"><a href="#2-2-设定时区" class="headerlink" title="2.2 设定时区"></a>2.2 设定时区</h3><p>另外，如果需要使用特定的时区，则可以设置<code>@JsonFormat</code>的<code>timezone</code>属性：</p><pre><code class="java">@JsonFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;, timezone=&quot;Asia/Shanghai&quot;)private LocalDateTime updateTime;</code></pre><p>如果类型已经包含时区，例如在<code>java.time.ZonedDatetime</code>中，则我们不需要使用它 。</p><h2 id="3-配置默认格式"><a href="#3-配置默认格式" class="headerlink" title="3.配置默认格式"></a>3.配置默认格式</h2><p>如果我们不想在每个字段上都添加上注解的话，我们也可以使用配置文件来为应用程序中的日期配置默认格式，并且这种方式更灵活，我们只需要在<code>applicaiton.yml</code>加入如下配置：</p><pre><code class="yml">spring:    jackson:        date-format: yyyy-MM-dd HH:mm:ss</code></pre><p>而且，如果我们想在JSON日期中使用特定的时区，则还有一个属性：</p><pre><code class="yml">spring:    jackson:      time-zone: Asia/Shanghai</code></pre><p>尽管像这样设置默认格式非常方便和直接，但是这种方法还是有一个缺点。它不支持Java8的日期类型，例如<code>LocalDate</code>和<code>LocalDateTime</code>，它只能用来格式化<code>Date</code>或<code>Calendar</code>类型的字段。</p><h2 id="4-自定义Jackson的ObjectMapper"><a href="#4-自定义Jackson的ObjectMapper" class="headerlink" title="4.自定义Jackson的ObjectMapper"></a>4.自定义Jackson的ObjectMapper</h2><p>因此，如果我们想使用Java 8日期类型，并设置默认的日期格式，那么我们需要研究创建<code>Jackson2ObjectMapperBuilderCustomizer</code>：</p><pre><code class="java">@Configuration@ConditionalOnClass(ObjectMapper.class)@AutoConfigureBefore(JacksonAutoConfiguration.class)public class JacksonConfig {        private static final String NORM_DATE_PATTERN = &quot;yyyy-MM-dd&quot;;        private static final String NORM_TIME_PATTERN = &quot;HH:mm:ss&quot;;        private static final String NORM_DATETIME_FORMAT = &quot;yyyy-MM-dd HH:mm:ss&quot;;        @Bean        public Jackson2ObjectMapperBuilderCustomizer customizer() {                return builder -&gt; {                        builder.simpleDateFormat(NORM_DATETIME_FORMAT);                        //属性值为null的不参与序列化            builder.serializationInclusion(JsonInclude.Include.NON_NULL);             builder.serializers(new LocalTimeSerializer(DateTimeFormatter.ofPattern(NORM_TIME_PATTERN)));             builder.serializers(new LocalDateSerializer(DateTimeFormatter.ofPattern(NORM_DATE_PATTERN)));             builder.serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(NORM_DATETIME_FORMAT)));                };        }}</code></pre><p>上面的示例显示了如何在我们的应用程序中配置默认格式。我们必须定义一个bean并覆盖它的customize方法来设置所需的格式，重要的是它可以同时支持Java8和旧式日期类型。</p><h2 id="5-其他注意事项"><a href="#5-其他注意事项" class="headerlink" title="5.其他注意事项"></a>5.其他注意事项</h2><h3 id="5-1-无法找到com-fasterxml-jackson-datatype-jsr310-ser-LocalDateSerializer"><a href="#5-1-无法找到com-fasterxml-jackson-datatype-jsr310-ser-LocalDateSerializer" class="headerlink" title="5.1 无法找到com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer"></a>5.1 无法找到<code>com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer</code></h3><p>需要我们在<strong>Pom</strong>添加额外的依赖</p><pre><code>&lt;dependency&gt;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;      &lt;artifactId&gt;spring-boot-starter-json&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Spring Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
