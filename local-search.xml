<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>半小时Docker简单入门</title>
    <link href="/2019/12/30/%E5%8D%8A%E5%B0%8F%E6%97%B6Docker%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/"/>
    <url>/2019/12/30/%E5%8D%8A%E5%B0%8F%E6%97%B6Docker%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="安装最新Docker"><a href="#安装最新Docker" class="headerlink" title="安装最新Docker"></a>安装最新Docker</h1><p>这里安装主要基于Linux环境下的安装，Windows环境可以直接使用Docker Desktop。</p><ol><li><p>安装 Docker 官方源</p><pre><code class="shell">sudo yum-config-manager \     --add-repo \     https://download.docker.com/linux/centos/docker-ce.repo</code></pre><p>如果这里提示<code>yum-config-manager：未找到命令</code>，我们需要先安装yum工具。</p><pre><code class="shell">yum install -y yum-utils</code></pre></li><li><p>更新源</p><pre><code class="shell">yum makecache fast</code></pre></li><li><p>安装docker-ce</p><pre><code class="shell">yum install -y docker-ce</code></pre></li><li><p>设置开机执行</p><pre><code class="shell">systemctl enable docker</code></pre></li><li><p>启动docker</p><pre><code class="shell">systemctl start docker</code></pre></li><li><p>检查docker版本</p><pre><code class="shell">docker version</code></pre></li></ol><h1 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h1><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><pre><code class="shell">docker pull name:tag</code></pre><p>默认镜像的下载地址为<a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p><p>由于镜像地址在国外，但是由于显而易见的网络原因，拉取镜像的过程非常耗时，严重影响使用 Docker 的体验。</p><p>因此我们需要将Docker的镜像地址执行国内的第三方仓库，这样可以极大的提高国内网络访问Docker Hub的速度。</p><pre><code class="shell">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io#该脚本可以将 --registry-mirror 加入到你的 Docker 配置文件 /etc/docker/daemon.json 中#同时，您也可以自己编辑vim /etc/docker/deamon.json文件，注意一定要符合json格式要求。# {#    &quot;registry-mirrors&quot;: [&quot;http://f1361db2.m.daocloud.io&quot;]# }</code></pre><h2 id="查看本地已下载镜像"><a href="#查看本地已下载镜像" class="headerlink" title="查看本地已下载镜像"></a>查看本地已下载镜像</h2><pre><code class="shell">docker images</code></pre><p><img src="https://imgkr.cn-bj.ufileos.com/80d3ec81-4a7b-4ca6-99c3-aa304de58bc2.png" srcset="/img/loading.gif" alt="images"></p><ul><li><strong>REPOSITORY：</strong>表示镜像的仓库源</li><li><strong>TAG：</strong>镜像的标签</li><li><strong>IMAGE ID：</strong>镜像ID</li><li><strong>CREATED：</strong>镜像创建时间</li><li><strong>SIZE：</strong>镜像大小</li></ul><h2 id="删除本地已下载镜像"><a href="#删除本地已下载镜像" class="headerlink" title="删除本地已下载镜像"></a>删除本地已下载镜像</h2><pre><code class="shell">docker rmi image_id</code></pre><h1 id="端口操作"><a href="#端口操作" class="headerlink" title="端口操作"></a>端口操作</h1><pre><code class="shell">docker run --name name -d -p 8080:80 nginx:1.17</code></pre><ul><li>–name：为容器指定一个名称。</li><li>-d：后台运行容器，并返回容器ID。</li><li>-p：指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong>。同时支持多端口映射， <strong>-p 80-90:80-90</strong>。</li></ul><h1 id="挂载操作"><a href="#挂载操作" class="headerlink" title="挂载操作"></a>挂载操作</h1><pre><code class="shell">docker run --name name -d -p 8080:80 -v /data:/usr/share/nginx/html nginx:1.17</code></pre><ul><li>-v：绑定一个卷，前面是宿主机的目录，后面是容器目录。</li></ul><h1 id="日志操作"><a href="#日志操作" class="headerlink" title="日志操作"></a>日志操作</h1><pre><code class="shell">docker logs -f 容器名称或容器ID</code></pre><h1 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h1><pre><code class="shell">docker exec -it 容器名称 sh</code></pre><ul><li>-i：标准输入。</li><li>-t：分配一个伪终端。</li></ul><h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><pre><code class="shell">docker rm -f 容器名称</code></pre><ul><li>-f：通过 SIGKILL 信号强制删除一个运行中的容器。</li><li>如果不加 <strong>-f</strong> 则无法删除一个正在运行的容器，需要首先<code>docker stop 容器名称</code>。</li></ul><h1 id="网络操作"><a href="#网络操作" class="headerlink" title="网络操作"></a>网络操作</h1><pre><code class="shell">docker inspect 容器名称</code></pre><h1 id="通过Dockerfile文件构建镜像"><a href="#通过Dockerfile文件构建镜像" class="headerlink" title="通过Dockerfile文件构建镜像"></a>通过Dockerfile文件构建镜像</h1><pre><code class="shell">docker built . -t name:tag</code></pre><p>使用当前目录的Dockerfile创建镜像。</p><ul><li>-t：指定构建镜像的名字和标签。</li><li>-f：指定要使用的Dockerfile的完整路径。</li><li>-m：设置内存最大值。</li></ul><h1 id="Dockerfile示例"><a href="#Dockerfile示例" class="headerlink" title="Dockerfile示例"></a>Dockerfile示例</h1><pre><code class="shell">FROM centos #制作base image 基础镜像，尽量使用官方的image作为base imageLABEL version=&quot;1.0&quot; #容器元信息，帮助信息，Metadata，类似于代码注释LABEL maintainer=&quot;author&quot; #容器作者信息#对于复杂的RUN命令，避免无用的分层，多条命令用反斜线换行，合成一条命令！RUN yum update &amp;&amp; yum install -y vim \    Python-dev #反斜线换行WORKDIR /root #相当于linux的cd命令，改变目录，尽量使用绝对路径！！！不要用RUN cdWORKDIR /test # 如果没有就自动创建ADD test.tar.gz /  # 添加到根目录并解压COPY hello test/  # 等同于上述ADD效果ADD与COPY   - 优先使用COPY命令    -ADD除了COPY功能还有解压功能ENV # 环境变量，尽可能使用ENV增加可维护性ENV MYSQL_VERSION 5.6 # 设置一个mysql常量</code></pre><h1 id="安装Docker-Compose"><a href="#安装Docker-Compose" class="headerlink" title="安装Docker-Compose"></a>安装Docker-Compose</h1><pre><code class="shell">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-composesudo chmod +x /usr/local/bin/docker-composesudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-composedocker-compose --version#这里使用的是1.25.4版本，如果需要其他的版本，打开`https://github.com/docker/compose/releases`找到需要的版本号进行替换即可</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
